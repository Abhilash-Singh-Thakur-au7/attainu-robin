Coding Challenges:

1)Given a sorted array and a target value, return the index if the target is found. 
If not, return the index where it would be if it were inserted in order. 
[You may assume no duplicates in the array.]

[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0


2) Optimize the counting sort algorithm.


Assignments:

1) Given a sorted array of integers A(0 based index) of size N, find the starting and ending position of a given integer B in array A.
Your algorithm runtime complexity must be in the order of O(log n). Return an array of size 2, such that first element = starting position of B in A and second element = ending position of B in A, if B is not found in A return [-1, -1].

Input 1:
    A = [5, 7, 7, 8, 8, 10]
    B = 8
Output 1:
    [3, 4]
Explanation 1:
    First occurence of 8 in A is at index 3
    Second occurence of 8 in A is at index 4
    ans = [3, 4]

Input 2:
    A = [5, 17, 100, 111]
    B = 3
Output 2:
    [-1, -1]

2) Write the code for binary search without using loops. [optional]
